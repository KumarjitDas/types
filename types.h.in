/**
 * @file types.h
 * @author Kumarjit Das
 * @date 2024-07-12
 * @version @TYPES_VERSION_MAJOR@.@TYPES_VERSION_MINOR@.@TYPES_VERSION_PATCH@
 * @brief A simple, header-only C library designed to provide types with sizes.
 */
/**
 * LICENSE:
 *
 * Copyright (c) 2024, Kumarjit Das
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef TYPES_H_
#define TYPES_H_


#define KD_DEFINED_LIBTYPES 1

#define TYPES_VERSION_MAJOR @TYPES_VERSION_MAJOR@
#define TYPES_VERSION_MINOR @TYPES_VERSION_MINOR@
#define TYPES_VERSION_PATCH @TYPES_VERSION_PATCH@

#define TYPES_VERSION_STR "@TYPES_VERSION_MAJOR@.@TYPES_VERSION_MINOR@.@TYPES_VERSION_PATCH@"
#define TYPES_VERSION_ARR { TYPES_VERSION_MAJOR, TYPES_VERSION_MINOR, TYPES_VERSION_PATCH }


#include "kdapi.h"


KD_EXTERN_BEGIN


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  64-Bit Integer and Pointer Signatures
 * ---------------------------------------------------------------------------------------------------------------------
 */

#if defined KD_ARCH_64BIT_INT
  #define TYPES_64BIT_INTEGER 1
#elif defined KD_ARCH_32BIT_INT
  #define TYPES_32BIT_INTEGER 1
#endif

#if defined KD_ARCH_64BIT_PTR
  #define TYPES_64BIT_POINTER 1
#elif defined KD_ARCH_32BIT_PTR
  #define TYPES_32BIT_POINTER 1
#endif


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Type Definitions
 * ---------------------------------------------------------------------------------------------------------------------
 */

#ifndef KD_CPLUSPLUS
enum kd_types__type_bool_ { false, true };
typedef enum kd_types__type_bool_ bool;
#endif

typedef char                      i8;
typedef unsigned char             u8;
typedef i8                        imin;
typedef u8                        umin;

#if defined KD_ARCH_32BIT_INT && __SIZEOF_INT__ == 2 && __SIZEOF_LONG__ == 4
typedef int                       i16;
typedef long                      i32;
typedef unsigned int              u16;
typedef unsigned long             u32;
#else
typedef short                     i16;
typedef int                       i32;
typedef unsigned short            u16;
typedef unsigned int              u32;
#endif

#if defined KD_ARCH_64BIT_INT
  #if defined _MSC_VER || defined __BORLANDC__ || defined __WATCOMC__ || (defined __alpha && defined __DECC)
typedef __int64                   i64;
typedef unsigned __int64          u64;
  #elif (defined __GNUC__ || defined __MWERKS__ || defined __SUNPRO_C || defined __SUNPRO_CC || defined __APPLE_CC__ || defined KD_OS_IRIX || defined _LONG_LONG || defined _CRAYC) && __SIZEOF_LONG__ == 8
typedef long                      i64;
typedef unsigned long             u64;
  /* #elif defined __LP64__ || defined __powerpc64__ || defined KD_CPU_SPARC64 */
  #else
typedef long                      i64;
typedef unsigned long             u64;
  #endif
typedef i64                       imax;
typedef u64                       umax;
#else
typedef i32                       imax;
typedef u32                       umax;
#endif  /* KD_ARCH_64BIT_INT */

#if defined KD_ARCH_64BIT_PTR
typedef u64                       usize;
#else
typedef u32                       usize;
#endif  /* KD_ARCH_64BIT_PTR */

typedef u8                        byte;
typedef u32                       charcode;
typedef float                     f32;
typedef double                    f64;

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
typedef f32                       fmin;
typedef f64                       fmax;
#endif

union kd_types__type_any_
{
  imax      val;
  void*     ptr;
  byte      slice[8];
  bool      val_bool;
  i8        val_i8;
  i16       val_i16;
  i32       val_i32;
  imin      val_imin;
  imax      val_imax;
  u8        val_u8;
  u16       val_u16;
  u32       val_u32;
  umin      val_umin;
  umax      val_umax;
  usize     val_usize;
  byte      val_byte;
  charcode  val_charcode;
  f32       val_f32;
  f64       val_f64;
  bool*     ptr_bool;
  i8*       ptr_i8;
  i16*      ptr_i16;
  i32*      ptr_i32;
  imin*     ptr_imin;
  imax*     ptr_imax;
  u8*       ptr_u8;
  u16*      ptr_u16;
  u32*      ptr_u32;
  umin*     ptr_umin;
  umax*     ptr_umax;
  usize*    ptr_usize;
  byte*     ptr_byte;
  charcode* ptr_charcode;
  f32*      ptr_f32;
  f64*      ptr_f64;

#if defined KD_ARCH_64BIT_INT
  i64       val_i64;
  u64       val_u64;
  i64*      ptr_i64;
  u64*      ptr_u64;
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  fmin      val_fmin;
  fmax      val_fmax;
  fmin*     ptr_fmin;
  fmax*     ptr_fmax;
#endif
};

typedef union kd_types__type_any_ any;


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Constant literal postfixes
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define LIT_BOOL(x)     (bool) (x)
#define LIT_I8(x)       (i8) (x)
#define LIT_I16(x)      (i16) (x)
#define LIT_U8(x)       (u8) (x)
#define LIT_U16(x)      (u16) (x)

#if defined KD_ARCH_32BIT_INT && __SIZEOF_INT__ == 2 && __SIZEOF_LONG__ == 4
  #define LIT_I32(x)    x##L
  #define LIT_U32(x)    x##UL
#else
  #define LIT_I32(x)    (i32) (x)
  #define LIT_U32(x)    x##U
#endif

#if defined TYPES_64BIT_INTEGER
  #if defined _MSC_VER || defined __BORLANDC__ || defined __WATCOMC__ || (defined __alpha && defined __DECC)
    #define LIT_I64(x)  x##LL
    #define LIT_U64(x)  x##ULL
  #elif (defined __GNUC__ || defined __MWERKS__ || defined __SUNPRO_C || defined __SUNPRO_CC || defined __APPLE_CC__ || defined KD_OS_IRIX || defined _LONG_LONG || defined _CRAYC) && __SIZEOF_LONG__ == 8
    #define LIT_I64(x)  x##L
    #define LIT_U64(x)  x##LU
  /* #elif defined __LP64__ || defined __powerpc64__ || defined KD_CPU_SPARC64 */
  #else
    #define LIT_I64(x)  (i64) (x)
    #define LIT_U64(x)  (u64) (x)
  #endif

  #define LIT_IMAX(x)   (imax) LIT_I64(x)
  #define LIT_UMAX(x)   (imax) LIT_U64(x)
#else
  #define LIT_IMAX(x)   (imax) LIT_I32(x)
  #define LIT_UMAX(x)   (imax) LIT_U32(x)
#endif  /* TYPES_64BIT_INTEGER */

/* A hack from Posh.h library */
#if defined __MINGW32__ && defined KD_ARCH_64BIT_INT
  #undef LIT_I64
  #undef LIT_U64
  #define LIT_I64(x)    x##LL
  #define LIT_U64(x)    x##LLU
#endif

#define LIT_IMIN(x)     (imin) (x)
#define LIT_UMIN(x)     (umin) (x)

#define LIT_BYTE(x)     (byte) (x)
#define LIT_CHARCODE(x) (charcode) LIT_U32(x)
#define LIT_F32(x)      x##F
#define LIT_F64(x)      (f64) (x)

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define LIT_FMIN(x)   LIT_F32(x)
  #define LIT_FMAX(x)   LIT_F64(x)
#endif

#if defined KD_ARCH_64BIT_PTR && defined TYPES_64BIT_INTEGER
  #define LIT_PTR(x)    (void*) LIT_U64(x)
#else
  #define LIT_PTR(x)    (void*) LIT_U32(x)
#endif


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Minimum Values Of Defined Types
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define MIN_I8       LIT_I8(-128)
#define MIN_I16      LIT_I16(-32768)
#define MIN_I32      (LIT_I32(-2147483647) - LIT_I32(1))
#define MIN_IMIN     LIT_IMIN(-128)
#define MIN_U8       LIT_U8(0)
#define MIN_U16      LIT_U16(0)
#define MIN_U32      LIT_U32(0)
#define MIN_UMIN     LIT_UMIN(0)
#define MIN_BYTE     LIT_BYTE(0)
#define MIN_CHARCODE LIT_CHARCODE(0)
#define MIN_F32      LIT_F32(-1.175494071E-38)
#define MIN_F64      LIT_F64(-2.22507385850720139E-308)
#define MIN_PTR      LIT_PTR(0)

#if defined KD_ARCH_64BIT_INT
  #define MIN_I64    (LIT_I64(-9223372036854775807) - LIT_I64(-1))
  #define MIN_IMAX   MIN_I64
  #define MIN_U64    LIT_I64(0)
  #define MIN_UMAX   MIN_U64
  #define MIN_USIZE  MIN_U64
#else
  #define MIN_IMAX   MIN_I32
  #define MIN_UMAX   MIN_U32
  #define MIN_USIZE  MIN_U32
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define MIN_FMIN   MIN_F32
  #define MIN_FMAX   MIN_F64
#endif


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Maximum Values Of Defined Types
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define MAX_I8       LIT_I8(127)
#define MAX_I16      LIT_I16(32767)
#define MAX_I32      LIT_I32(2147483647)
#define MAX_IMIN     LIT_IMIN(127)
#define MAX_U8       LIT_U8(255)
#define MAX_U16      LIT_U16(65535)
#define MAX_U32      LIT_U32(4294967295)
#define MAX_UMIN     LIT_UMIN(255)
#define MAX_BYTE     LIT_BYTE(MAX_U8)
#define MAX_CHARCODE LIT_CHARCODE(MAX_U32)
#define MAX_F32      LIT_F32(3.402823466E+38)
#define MAX_F64      LIT_F64(1.79769313486231571E+308)

#if defined KD_ARCH_64BIT_INT
  #define MAX_I64    LIT_I64(9223372036854775807)
  #define MAX_IMAX   MAX_I64
  #define MAX_U64    LIT_U64(18446744073709551615)
  #define MAX_UMAX   MAX_U64
  #define MAX_USIZE  MAX_U64
#else
  #define MAX_IMAX   MAX_I32
  #define MAX_UMAX   MAX_U32
  #define MAX_USIZE  MAX_U32
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define MAX_FMIN   MAX_F32
  #define MAX_FMAX   MAX_F64
#endif

#if defined KD_ARCH_64BIT_PTR
  #if defined KD_ARCH_64BIT_INT
    #define MAX_PTR  ((void*) MAX_U64)
  #else
    #define MAX_PTR  ((void*) 0xFFFFFFFFFFFFFFFF)
  #endif  /* KD_ARCH_64BIT_INT */
#else
  #define MAX_PTR    ((void*) MAX_U32)
#endif  /* KD_ARCH_64BIT_PTR */


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Constant Values/Macros
 * ---------------------------------------------------------------------------------------------------------------------
 */

#if defined null
  #undef null
#endif  /* null */

#if defined EXIT_SUCCESS
  #undef EXIT_SUCCESS
#endif  /* EXIT_SUCCESS */

#if defined EXIT_FAILURE
  #undef EXIT_FAILURE
#endif  /* EXIT_FAILURE */

#define null         LIT_PTR(0x00)
#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Sizes Of Defined Types (In Bytes)
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define SZ_BOOL     sizeof(bool)
#define SZ_I8       sizeof(i8)
#define SZ_I16      sizeof(i16)
#define SZ_I32      sizeof(i32)
#define SZ_IMIN     sizeof(imin)
#define SZ_IMAX     sizeof(imax)
#define SZ_U8       sizeof(u8)
#define SZ_U16      sizeof(u16)
#define SZ_U32      sizeof(u32)
#define SZ_UMIN     sizeof(umin)
#define SZ_UMAX     sizeof(umax)
#define SZ_USIZE    sizeof(usize)
#define SZ_BYTE     sizeof(byte)
#define SZ_CHARCODE sizeof(charcode)
#define SZ_F32      sizeof(f32)
#define SZ_F64      sizeof(f64)
#define SZ_ANY      sizeof(any)
#define SZ_PTR      sizeof(void*)

#if defined KD_ARCH_64BIT_INT
  #define SZ_I64    sizeof(i64)
  #define SZ_U64    sizeof(u64)
#endif

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define SZ_FMIN   sizeof(fmin)
  #define SZ_FMAX   sizeof(fmax)
#endif


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  C-style Format Specifiers
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define FMTSP_BOOL       "%s"
#define FMTSP_I8         "%d"
#define FMTSP_I16        "%d"
#define FMTSP_IMIN       "%d"
#define FMTSP_U8         "%u"
#define FMTSP_U16        "%u"
#define FMTSP_UMIN       "%u"
#define FMTSP_BYTE       "%u"
#define FMTSP_F32        "%.9e"
#define FMTSP_F64        "%.17e"
#define FMTSP_PTR        "%p"
#define FMTSP_ANY_SLICES "%d|%d|%d|%d|%d|%d|%d|%d"

#if defined KD_ARCH_32BIT_INT
  #if __SIZEOF_INT__ == 4
    #define FMTSP_I32    "%d"
    #define FMTSP_U32    "%u"
  #else
    #define FMTSP_I32    "%ld"
    #define FMTSP_U32    "%lu"
  #endif
#else
  #define FMTSP_I32      "%d"
  #define FMTSP_U32      "%u"
#endif  /* KD_ARCH_32BIT_INT */

#define FMTSP_CHARCODE  FMTSP_U32

#if defined KD_ARCH_64BIT_INT
  #ifdef KD_COMP_MSVC
    #define FMTSP_I64    "%lld"
    #define FMTSP_U64    "%llu"
    #define FMTSP_IMAX   "%lld"
    #define FMTSP_UMAX   "%llu"
    #define FMTSP_USIZE  "%llu"
  #else
    #define FMTSP_I64    "%ld"
    #define FMTSP_U64    "%lu"
    #define FMTSP_IMAX   "%ld"
    #define FMTSP_UMAX   "%lu"
    #define FMTSP_USIZE  "%lu"
  #endif  /* KD_COMP_MSVC */
#else
  #define FMTSP_IMAX     FMTSP_I32
  #define FMTSP_UMAX     FMTSP_U32
  #define FMTSP_USIZE    FMTSP_U32
#endif  /* KD_ARCH_64BIT_INT */

#if defined KD_ARCH_64BIT_INT
  #define FMTSP_ANY      FMTSP_UMAX
#elif KD_ARCH_64BIT_PTR
  #define FMTSP_ANY      FMTSP_PTR
#else
  #define FMTSP_ANY      FMTSP_U32
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define FMTSP_FMIN     "%.9e"
  #define FMTSP_FMAX     "%.17e"
#endif


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  C-style Format Specifier Based Type Cast
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define FSBTC_BOOL(x)       ((x) ? "true" : "false")
#define FSBTC_I8(x)         (int) (x)
#define FSBTC_I16(x)        (int) (x)
#define FSBTC_IMIN(x)       (int) (x)
#define FSBTC_U8(x)         (unsigned int) (x)
#define FSBTC_U16(x)        (unsigned int) (x)
#define FSBTC_UMIN(x)       (unsigned int) (x)
#define FSBTC_BYTE(x)       (unsigned int) (x)
#define FSBTC_F32(x)        (double) (x)
#define FSBTC_F64(x)        (x)
#define FSBTC_PTR(x)        (void*) (x)

#if defined KD_ARCH_32BIT_INT
  #if __SIZEOF_INT__ == 4
    #define FSBTC_I32(x)    (x)
    #define FSBTC_U32(x)    (unsigned int) (x)
  #else
    #define FSBTC_I32(x)    (long) (x)
    #define FSBTC_U32(x)    (unsigned long) (x)
  #endif
#else
  #define FSBTC_I32(x)      (x)
  #define FSBTC_U32(x)      (unsigned int) (x)
#endif  /* KD_ARCH_32BIT_INT */

#define FSBTC_CHARCODE(x)   FSBTC_U32(x)

#if defined KD_ARCH_64BIT_INT
  #ifdef KD_COMP_MSVC
    #define FSBTC_I64(x)    (long long) (x)
    #define FSBTC_U64(x)    (unsigned long long) (x)
    #define FSBTC_IMAX(x)   (long long) (x)
    #define FSBTC_UMAX(x)   (unsigned long long) (x)
    #define FSBTC_USIZE(x)  (unsigned long long) (x)
  #else
    #define FSBTC_I64(x)    (long) (x)
    #define FSBTC_U64(x)    (unsigned long) (x)
    #define FSBTC_IMAX(x)   (long) (x)
    #define FSBTC_UMAX(x)   (unsigned long) (x)
    #define FSBTC_USIZE(x)  (unsigned long) (x)
  #endif  /* KD_COMP_MSVC */
#else
  #define FSBTC_IMAX(x)     FSBTC_I32(x)
  #define FSBTC_UMAX(x)     FSBTC_U32(x)
  #define FSBTC_USIZE(x)    FSBTC_U32(x)
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define FSBTC_FMIN(x)     FSBTC_F32(x)
  #define FSBTC_FMAX(x)     FSBTC_F64(x)
#endif

#define FSBTC_ANY_SLICES(x) \
  (int) (x).slice[0], (int) (x).slice[1], \
  (int) (x).slice[2], (int) (x).slice[3], \
  (int) (x).slice[4], (int) (x).slice[5], \
  (int) (x).slice[6], (int) (x).slice[7]

#define FSBTC_ANY(x)        FSBTC_ANY_SLICES(x)


/**
 * ---------------------------------------------------------------------------------------------------------------------
 *  Value Assignment
 * ---------------------------------------------------------------------------------------------------------------------
 */

#define SET_ANY(x, v0, v1, v2, v3, v4, v5, v6, v7) \
  (x).slice[0] = (byte) (v0); \
  (x).slice[1] = (byte) (v1); \
  (x).slice[2] = (byte) (v2); \
  (x).slice[3] = (byte) (v3); \
  (x).slice[4] = (byte) (v4); \
  (x).slice[5] = (byte) (v5); \
  (x).slice[6] = (byte) (v6); \
  (x).slice[7] = (byte) (v7)

#define ASSIGN_ANY_SLICES(d, s) \
  (d).slice[0] = (s).slice[0]; \
  (d).slice[1] = (s).slice[1]; \
  (d).slice[2] = (s).slice[2]; \
  (d).slice[3] = (s).slice[3]; \
  (d).slice[4] = (s).slice[4]; \
  (d).slice[5] = (s).slice[5]; \
  (d).slice[6] = (s).slice[6]; \
  (d).slice[7] = (s).slice[7]

#define ASSIGN_ANY(d, s) ASSIGN_ANY_SLICES(d, s)

#define ASSIGN_ANY_VAL(x, v)          (x).val = (imax) (v)
#define ASSIGN_ANY_TVAL(T, x, v)      (x).val_##T = (T) (v)
#define ASSIGN_ANY_VAL_I8(x, v)       ASSIGN_ANY_TVAL(i8, x, v)
#define ASSIGN_ANY_VAL_I16(x, v)      ASSIGN_ANY_TVAL(i16, x, v)
#define ASSIGN_ANY_VAL_I32(x, v)      ASSIGN_ANY_TVAL(i32, x, v)
#define ASSIGN_ANY_VAL_U8(x, v)       ASSIGN_ANY_TVAL(u8, x, v)
#define ASSIGN_ANY_VAL_U16(x, v)      ASSIGN_ANY_TVAL(u16, x, v)
#define ASSIGN_ANY_VAL_U32(x, v)      ASSIGN_ANY_TVAL(u32, x, v)
#define ASSIGN_ANY_VAL_IMIN(x, v)     ASSIGN_ANY_TVAL(imin, x, v)
#define ASSIGN_ANY_VAL_IMAX(x, v)     ASSIGN_ANY_TVAL(imax, x, v)
#define ASSIGN_ANY_VAL_UMIN(x, v)     ASSIGN_ANY_TVAL(umin, x, v)
#define ASSIGN_ANY_VAL_UMAX(x, v)     ASSIGN_ANY_TVAL(umax, x, v)
#define ASSIGN_ANY_VAL_BYTE(x, v)     ASSIGN_ANY_TVAL(byte, x, v)
#define ASSIGN_ANY_VAL_CHARCODE(x, v) ASSIGN_ANY_TVAL(charcode, x, v)
#define ASSIGN_ANY_VAL_USIZE(x, v)    ASSIGN_ANY_TVAL(usize, x, v)
#define ASSIGN_ANY_VAL_F32(x, v)      ASSIGN_ANY_TVAL(f32, x, v)
#define ASSIGN_ANY_VAL_F64(x, v)      ASSIGN_ANY_TVAL(f64, x, v)

#if defined KD_ARCH_64BIT_INT
  #define ASSIGN_ANY_VAL_I64(x, v)    ASSIGN_ANY_TVAL(i64, x, v)
  #define ASSIGN_ANY_VAL_U64(x, v)    ASSIGN_ANY_TVAL(u64, x, v)
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define ASSIGN_ANY_VAL_FMIN(x, v)   ASSIGN_ANY_TVAL(fmin, x, v)
  #define ASSIGN_ANY_VAL_FMAX(x, v)   ASSIGN_ANY_TVAL(fmax, x, v)
#endif

#define ASSIGN_ANY_PTR(x, v)          (x).ptr = (void*) (v)
#define ASSIGN_ANY_TPTR(T, x, v)      (x).ptr_##T = (T*) (v)
#define ASSIGN_ANY_PTR_I8(x, v)       ASSIGN_ANY_TPTR(i8, x, v)
#define ASSIGN_ANY_PTR_I16(x, v)      ASSIGN_ANY_TPTR(i16, x, v)
#define ASSIGN_ANY_PTR_I32(x, v)      ASSIGN_ANY_TPTR(i32, x, v)
#define ASSIGN_ANY_PTR_U8(x, v)       ASSIGN_ANY_TPTR(u8, x, v)
#define ASSIGN_ANY_PTR_U16(x, v)      ASSIGN_ANY_TPTR(u16, x, v)
#define ASSIGN_ANY_PTR_U32(x, v)      ASSIGN_ANY_TPTR(u32, x, v)
#define ASSIGN_ANY_PTR_IMIN(x, v)     ASSIGN_ANY_TPTR(imin, x, v)
#define ASSIGN_ANY_PTR_IMAX(x, v)     ASSIGN_ANY_TPTR(imax, x, v)
#define ASSIGN_ANY_PTR_UMIN(x, v)     ASSIGN_ANY_TPTR(umin, x, v)
#define ASSIGN_ANY_PTR_UMAX(x, v)     ASSIGN_ANY_TPTR(umax, x, v)
#define ASSIGN_ANY_PTR_BYTE(x, v)     ASSIGN_ANY_TPTR(byte, x, v)
#define ASSIGN_ANY_PTR_CHARCODE(x, v) ASSIGN_ANY_TPTR(charcode, x, v)
#define ASSIGN_ANY_PTR_USIZE(x, v)    ASSIGN_ANY_TPTR(usize, x, v)
#define ASSIGN_ANY_PTR_F32(x, v)      ASSIGN_ANY_TPTR(f32, x, v)
#define ASSIGN_ANY_PTR_F64(x, v)      ASSIGN_ANY_TPTR(f64, x, v)

#if defined KD_ARCH_64BIT_INT
  #define ASSIGN_ANY_PTR_I64(x, v)    ASSIGN_ANY_TPTR(i64, x, v)
  #define ASSIGN_ANY_PTR_U64(x, v)    ASSIGN_ANY_TPTR(u64, x, v)
#endif  /* KD_ARCH_64BIT_INT */

#if !(defined KD_CPLUSPLUS && defined KD_GOOGLE_TEST && defined KD_OS_WINDOWS && defined KD_COMP_MSVC)
  #define ASSIGN_ANY_PTR_FMIN(x, v)   ASSIGN_ANY_TPTR(fmin, x, v)
  #define ASSIGN_ANY_PTR_FMAX(x, v)   ASSIGN_ANY_TPTR(fmax, x, v)
#endif


KD_EXTERN_END


#endif  /* TYPES_H_ */
